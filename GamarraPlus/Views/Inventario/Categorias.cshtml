@model IEnumerable<GamarraPlus.Models.Categoria>

@{
    ViewData["Title"] = "Categorias";
}

<h1>Categorias</h1>

<p>
    <button class="btn btn-primary" onclick="openCreateModal()">Create New</button>
</p>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.IdCategoria)</th>
                <th>@Html.DisplayNameFor(model => model.Descripcion)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.IdCategoria)</td>
                    <td>@Html.DisplayFor(modelItem => item.Descripcion)</td>
                    <td>
                        <a class="btn btn-primary" onclick="openEditModal('@item.IdCategoria', '@item.Descripcion')">Edit</a> |
                        <button class="btn btn-danger" onclick="confirmDelete('@item.IdCategoria', '@item.Descripcion')">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Modal para la edición o creación de la categoría -->
<div class="modal fade" id="modalEditar" tabindex="-1" aria-labelledby="modalEditarLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEditarLabel">Edit Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Formulario de edición o creación de la categoría -->
                <form id="formEditarCategoria">
                    <div class="mb-3">
                        <label for="inputDescripcion" class="form-label">Description</label>
                        <input type="text" class="form-control" id="inputDescripcion" name="descripcion">
                    </div>
                    <input type="hidden" id="inputIdCategoria" name="idCategoria">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="EditarCategoria()">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para la creación de una nueva categoría -->
<div class="modal fade" id="modalCrear" tabindex="-1" aria-labelledby="modalCrearLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalCrearLabel">Create New Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Formulario para crear una nueva categoría -->
                <form id="formCrearCategoria">
                    <div class="mb-3">
                        <label for="inputNuevaDescripcion" class="form-label">Description</label>
                        <input type="text" class="form-control" id="inputNuevaDescripcion" name="nuevaDescripcion">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="CrearCategoria()">Create</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function confirmDelete(idCategoria, descripcion) {
        Swal.fire({
            title: 'Are you sure?',
            text: `You are about to delete category with ID ${idCategoria} (${descripcion}). This action cannot be undone!`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                // If the user confirms deletion
                deleteCategoria(idCategoria);
            }
        });
    }

    async function deleteCategoria(idCategoria) {
        try {
            const response = await fetch(`/Inventario/EliminarCategoria?idCategoria=${idCategoria}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                // Close the confirmation alert
                Swal.fire({
                    title: 'Deleted!',
                    text: 'The category has been deleted.',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 1500
                });
                // Reload the page after successful deletion
                location.reload();
            } else {
                throw new Error('Failed to delete category!');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || 'Failed to delete category!'
            });
        }
    }

    // Función para abrir el modal de creación de categoría
    function openCreateModal() {
        $('#inputNuevaDescripcion').val('');
        $('#modalCrearLabel').text('Create New Category');
        $('#modalCrear').modal('show');
    }

    // Función para enviar los cambios al servidor al hacer clic en el botón "Create"
    async function CrearCategoria() {
        var nuevaDescripcion = $('#inputNuevaDescripcion').val();

        try {
            const response = await fetch(`/Inventario/GuardarCategoria`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    descripcion: nuevaDescripcion
                })
            });

            if (response.ok) {
                // Si la respuesta es exitosa, muestra un mensaje de éxito y recarga la página
                Swal.fire({
                    title: 'Created!',
                    text: 'The category has been created.',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error('Failed to create category!');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || 'Failed to create category!'
            });
        }
    }

    // Función para abrir el modal con los detalles de la categoría para editar
    function openEditModal(idCategoria, descripcion) {
        $('#inputIdCategoria').val(idCategoria);
        $('#inputDescripcion').val(descripcion);
        $('#modalEditarLabel').text('Edit Category');
        $('#modalEditar').modal('show');
    }

    // Función para enviar los cambios al servidor al hacer clic en el botón "Save changes"
    async function EditarCategoria() {
        var idCategoria = $('#inputIdCategoria').val();
        var nuevaDescripcion = $('#inputDescripcion').val();

        try {
            const response = await fetch(`/Inventario/ActualizarCategoria`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    idCategoria: idCategoria,
                    descripcion: nuevaDescripcion
                })
            });

            if (response.ok) {
                // Si la respuesta es exitosa, muestra un mensaje de éxito y recarga la página
                Swal.fire({
                    title: 'Saved!',
                    text: 'The category has been updated.',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error('Failed to save category!');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || 'Failed to save category!'
            });
        }
    }
</script>
