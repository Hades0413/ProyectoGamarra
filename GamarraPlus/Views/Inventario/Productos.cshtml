@model IEnumerable<GamarraPlus.Models.Producto>

@{
    ViewData["Title"] = "Productos";
    int page = ViewBag.Page ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
}


<head>
    <link rel="stylesheet" href="~/css/tables.css">
</head>

<main>

    <p class="crear-btn">
        <button class="btn btn-primary" onclick="openCreateModal()">Crear Nuevo</button>
    </p>


    <div class="wrapper">
        <table class="tabla">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>CÓDIGO</th>
                    <th>DESCRIPCIÓN</th>
                    <th>CATEGORÍA</th>
                    <th>PRECIO COMPRA</th>
                    <th>PRECIO VENTA</th>
                    <th>STOCK</th>
                    <th>IMAGEN</th>
                    <th>ACCIONES</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td data-cell="id">@Html.DisplayFor(modelItem => item.IdProducto)</td>
                        <td data-cell="código">@Html.DisplayFor(modelItem => item.Codigo)</td>
                        <td data-cell="descripción">@Html.DisplayFor(modelItem => item.Descripcion)</td>
                        <td data-cell="categoría">@Html.DisplayFor(modelItem => item.oCategoria.Descripcion)</td>
                        <td data-cell="Precio Compra">@Html.DisplayFor(modelItem => item.PrecioCompra)</td>
                        <td data-cell="Precio Venta">@Html.DisplayFor(modelItem => item.PrecioVenta)</td>
                        <td data-cell="stock">@Html.DisplayFor(modelItem => item.Stock)</td>
                        <td data-cell="imagen de muestra">
                            <img src="@item.RutaImagen" class="imagen-producto" />
                        </td>
                        <td data-cell="acciones">
                            <div class="acciones-btns">
                                <a class="btnEditar btn-primary" onclick="openEditModal('@item.IdProducto', '@item.Codigo', '@item.Descripcion', '@item.PrecioCompra', '@item.PrecioVenta', '@item.Stock', '@item.oCategoria.Descripcion')">EDITAR</a>
                                <button class="btnEliminar btn-danger" onclick="confirmDelete('@item.IdProducto', '@item.Descripcion')">DELETE</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</main>

<div class="modal fade" id="modalEditar" tabindex="-1" aria-labelledby="modalEditarLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEditarLabel">Editar producto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="formEditarProducto">
                    <div class="mb-3">
                        <label for="inputCodigo" class="form-label">Código</label>
                        <input type="text" class="form-control" id="inputCodigo" name="codigo">
                    </div>
                    <div class="mb-3">
                        <label for="inputDescripcion" class="form-label">Descripción</label>
                        <input type="text" class="form-control" id="inputDescripcion" name="descripcion">
                    </div>
                    <div class="mb-3">
                        <label for="selectCategoria" class="form-label">Categoría</label>
                        <select class="form-control" id="selectCategoria" name="categoria">
                            @foreach (var categoria in ViewBag.Categorias)
                            {
                                <option value="@categoria.IdCategoria">@categoria.Descripcion</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="inputPrecioCompra" class="form-label">Precio de compra</label>
                        <input type="number" class="form-control" id="inputPrecioCompra" name="precioCompra">
                    </div>
                    <div class="mb-3">
                        <label for="inputPrecioVenta" class="form-label">Precio de venta</label>
                        <input type="number" class="form-control" id="inputPrecioVenta" name="precioVenta">
                    </div>
                    <div class="mb-3">
                        <label for="inputStock" class="form-label">Stock</label>
                        <input type="number" class="form-control" id="inputStock" name="stock">
                    </div>

                    <div class="mb-3">
                        <label for="inputImagen" class="form-label">Imagen</label>
                        <input type="file" class="form-control" id="inputImagen" name="imagen">
                    </div>

                    <input type="hidden" id="inputIdProducto" name="idProducto">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="EditarProducto()">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalCrear" tabindex="-1" aria-labelledby="modalCrearLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalCrearLabel">Crear nuevo Producto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="formCrearProducto">
                    <div class="mb-3">
                        <label for="inputNuevoCodigo" class="form-label">Código</label>
                        <input type="text" class="form-control" id="inputNuevoCodigo" name="nuevoCodigo">
                    </div>
                    <div class="mb-3">
                        <label for="inputNuevaDescripcion" class="form-label">Descripción</label>
                        <input type="text" class="form-control" id="inputNuevaDescripcion" name="nuevaDescripcion">
                    </div>
                    <div class="mb-3">
                        <label for="selectNuevaCategoria" class="form-label">Categoría</label>
                        <select class="form-control" id="selectNuevaCategoria" name="idCategoria">
                            @foreach (var categoria in ViewBag.Categorias)
                            {
                                <option value="@categoria.IdCategoria">@categoria.Descripcion</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="inputNuevoPrecioCompra" class="form-label">Precio de compra</label>
                        <input type="number" class="form-control" id="inputNuevoPrecioCompra" name="nuevoPrecioCompra">
                    </div>
                    <div class="mb-3">
                        <label for="inputNuevoPrecioVenta" class="form-label">Precio de venta</label>
                        <input type="number" class="form-control" id="inputNuevoPrecioVenta" name="nuevoPrecioVenta">
                    </div>
                    <div class="mb-3">
                        <label for="inputNuevoStock" class="form-label">Stock</label>
                        <input type="number" class="form-control" id="inputNuevoStock" name="nuevoStock">
                    </div>
                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="CrearProducto()">Create</button>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Script para mostrar la imagen en lugar de la ruta
    document.addEventListener("DOMContentLoaded", function () {
        var imagenes = document.querySelectorAll(".imagen-producto");
        imagenes.forEach(function (imagen) {
            var rutaImagen = imagen.getAttribute("src");
            imagen.setAttribute("src", rutaImagen);
        });
    });
</script>

<script>
    var categorias = @Json.Serialize(ViewBag.Categorias);

    var selectNuevaCategoria = document.getElementById('selectNuevaCategoria');

    categorias.forEach(function (categoria) {
        var option = document.createElement('option');
        option.value = categoria.Value;
        option.textContent = categoria.Text;
        selectNuevaCategoria.appendChild(option);
    });
</script>

<script>
    function confirmDelete(idProducto, descripcion) {
        Swal.fire({
            title: '¿Estás seguro?',
            text: `Estás a punto de eliminar el producto con ID ${idProducto} (${descripcion}). ¡Esta acción no se puede deshacer!`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: '¡Sí, bórralo!',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                deleteProducto(idProducto);
            }
        });
    }

    async function deleteProducto(idProducto) {
        try {
            const response = await fetch(`/Inventario/EliminarProducto?idProducto=${idProducto}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                Swal.fire({
                    title: '¡Eliminado!',
                    text: 'El producto ha sido eliminado.',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 2000
                });

                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                throw new Error('¡No se pudo eliminar el producto!');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || '¡No se pudo eliminar el producto!'
            });
        }
    }

    function openEditModal(idProducto, codigo, descripcion, precioCompra, precioVenta, stock, categoria) {
        $('#inputIdProducto').val(idProducto);
        $('#inputCodigo').val(codigo);
        $('#inputDescripcion').val(descripcion);
        $('#inputPrecioCompra').val(precioCompra);
        $('#inputPrecioVenta').val(precioVenta);
        $('#inputStock').val(stock);

        $('#selectCategoria').val(categoria);

        $('#selectCategoria option').filter(function () {
            return $(this).text() === categoria;
        }).prop('selected', true);

        $('#modalEditarLabel').text('Edit Product');
        $('#modalEditar').modal('show');
    }

    async function EditarProducto() {
        var idProducto = $('#inputIdProducto').val();
        var nuevoCodigo = $('#inputCodigo').val();
        var nuevaDescripcion = $('#inputDescripcion').val();
        var nuevoPrecioCompra = $('#inputPrecioCompra').val();
        var nuevoPrecioVenta = $('#inputPrecioVenta').val();
        var nuevoStock = $('#inputStock').val();
        var categoria = $('#selectCategoria').val();

        try {
            const response = await fetch(`/Inventario/ActualizarProducto`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    idProducto: idProducto,
                    codigo: nuevoCodigo,
                    descripcion: nuevaDescripcion,
                    precioCompra: nuevoPrecioCompra,
                    precioVenta: nuevoPrecioVenta,
                    stock: nuevoStock,
                    oCategoria: {
                        IdCategoria: categoria,
                        Descripcion: $('#selectNuevaCategoria option:selected').text()
                    }
                })
            });

            if (response.ok) {
                Swal.fire({
                    title: '¡Editado!',
                    text: 'El producto ha sido actualizado.',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 2000
                });

                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                throw new Error('¡No se pudo guardar el producto!');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || '¡No se pudo guardar el producto!'
            });
        }
    }

</script>

<script>
    function openCreateModal() {
        $('#inputNuevoCodigo').val('');
        $('#inputNuevaDescripcion').val('');
        $('#inputNuevoPrecioCompra').val('');
        $('#inputNuevoPrecioVenta').val('');
        $('#inputNuevoStock').val('');
        $('#selectNuevaCategoria').val('');
        $('#modalCrearLabel').text('Create New Product');
        $('#modalCrear').modal('show');
    }

    async function CrearProducto() {
        var nuevoCodigo = $('#inputNuevoCodigo').val();
        var nuevaDescripcion = $('#inputNuevaDescripcion').val();
        var nuevoPrecioCompra = $('#inputNuevoPrecioCompra').val();
        var nuevoPrecioVenta = $('#inputNuevoPrecioVenta').val();
        var nuevoStock = $('#inputNuevoStock').val();
        var idCategoria = $('#selectNuevaCategoria').val();

        try {
            const response = await fetch(`/Inventario/GuardarProducto`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    Codigo: nuevoCodigo,
                    Descripcion: nuevaDescripcion,
                    PrecioCompra: nuevoPrecioCompra,
                    PrecioVenta: nuevoPrecioVenta,
                    Stock: nuevoStock,
                    oCategoria: {
                        IdCategoria: idCategoria,
                        Descripcion: $('#selectNuevaCategoria option:selected').text()
                    }
                })
            });

            if (response.ok) {
                Swal.fire({
                    title: '¡Creado!',
                    text: 'El producto ha sido creado.',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 2000
                });

                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                throw new Error('¡No se pudo crear el producto!');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || '¡No se pudo crear el producto!'
            });
        }
    }
</script>


